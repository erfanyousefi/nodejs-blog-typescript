"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
var express = require("express");
var express_1 = require("express");
var types_1 = require("./decorators/types");
var Server = (function () {
    function Server(showLogs) {
        this._showLogs = false;
        this._app = express();
        this._showLogs = showLogs || false;
    }
    Object.defineProperty(Server.prototype, "app", {
        get: function () {
            return this._app;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "showLogs", {
        get: function () {
            return this._showLogs;
        },
        set: function (showLogs) {
            this._showLogs = showLogs;
        },
        enumerable: true,
        configurable: true
    });
    Server.prototype.addControllers = function (controllers, routerLib, globalMiddleware) {
        var _this = this;
        controllers = (controllers instanceof Array) ? controllers : [controllers];
        var routerLibrary = routerLib || express_1.Router;
        controllers.forEach(function (controller) {
            if (controller) {
                var routerAndPath = _this.getRouter(routerLibrary, controller);
                if (routerAndPath) {
                    if (globalMiddleware) {
                        _this.app.use(routerAndPath.basePath, globalMiddleware, routerAndPath.router);
                    }
                    else {
                        _this.app.use(routerAndPath.basePath, routerAndPath.router);
                    }
                }
            }
        });
    };
    Server.prototype.wrapErrorMiddleware = function (errorMiddleware, requestHandler) {
        return function (req, res, next) {
            try {
                requestHandler(req, res, next);
            }
            catch (error) {
                errorMiddleware(error, req, res, next);
            }
        };
    };
    Server.prototype.getRouter = function (routerLibrary, controller) {
        var _this = this;
        var prototype = Object.getPrototypeOf(controller);
        var classMetadata = Reflect.getOwnMetadata(types_1.classMetadataKey, prototype);
        if (!classMetadata) {
            return null;
        }
        var basePath = classMetadata.basePath, children = classMetadata.childControllers, classErrorMiddleware = classMetadata.errorMiddlewares, classMiddleware = classMetadata.middlewares, options = classMetadata.options, classWrapper = classMetadata.wrapper;
        if (!basePath) {
            return null;
        }
        var router = routerLibrary(options);
        if (this.showLogs) {
            console.log(Server.LOG_STR + (" \"" + controller.constructor.name + "\""));
        }
        if (classMiddleware) {
            router.use(classMiddleware);
        }
        var members = Object.getOwnPropertyNames(controller);
        members = members.concat(Object.getOwnPropertyNames(prototype));
        members.forEach(function (member) {
            var methodMetadata = Reflect.getOwnMetadata(member, prototype);
            if (methodMetadata) {
                var httpRoutes = methodMetadata.httpRoutes, middlewares_1 = methodMetadata.middlewares, errorMiddlewares = methodMetadata.errorMiddlewares, wrapper = methodMetadata.wrapper;
                var callBack_1 = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return controller[member].apply(controller, args);
                };
                if (classWrapper) {
                    callBack_1 = classWrapper(callBack_1);
                }
                if (wrapper) {
                    callBack_1 = wrapper(callBack_1);
                }
                if (errorMiddlewares) {
                    errorMiddlewares.forEach(function (errorMiddleware) {
                        callBack_1 = _this.wrapErrorMiddleware(errorMiddleware, callBack_1);
                    });
                }
                if (httpRoutes) {
                    httpRoutes.forEach(function (route) {
                        var httpDecorator = route.httpDecorator, path = route.path;
                        if (middlewares_1) {
                            router[httpDecorator](path, middlewares_1, callBack_1);
                        }
                        else {
                            router[httpDecorator](path, callBack_1);
                        }
                    });
                }
            }
        });
        if (children) {
            children.forEach(function (child) {
                var childRouterAndPath = _this.getRouter(routerLibrary, child);
                if (childRouterAndPath) {
                    router.use(childRouterAndPath.basePath, childRouterAndPath.router);
                }
            });
        }
        if (classErrorMiddleware) {
            router.use(classErrorMiddleware);
        }
        return {
            basePath: basePath,
            router: router,
        };
    };
    Server.LOG_STR = 'Setting up controller:';
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=Server.js.map